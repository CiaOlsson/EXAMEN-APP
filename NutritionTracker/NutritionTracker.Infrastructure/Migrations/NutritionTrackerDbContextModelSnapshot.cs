// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NutritionTracker.Infrastructure.DbContext;

#nullable disable

namespace NutritionTracker.Infrastructure.Migrations
{
    [DbContext(typeof(NutritionTrackerDbContext))]
    partial class NutritionTrackerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NutritionTracker.Domain.DomainEntities.DomainEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("NutritionTracker.Domain.DomainEntities.FoodEntity", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodId"));

                    b.Property<int?>("AddedSugar_g")
                        .HasColumnType("int");

                    b.Property<double?>("Alcohol_g")
                        .HasColumnType("float");

                    b.Property<double?>("ArachidicAcid_g")
                        .HasColumnType("float");

                    b.Property<double?>("ArachidonicAcid_g")
                        .HasColumnType("float");

                    b.Property<double?>("Ash_g")
                        .HasColumnType("float");

                    b.Property<double?>("BetaCarotene_ug")
                        .HasColumnType("float");

                    b.Property<int?>("Calcium_mg")
                        .HasColumnType("int");

                    b.Property<double?>("Carbohydrates_g")
                        .HasColumnType("float");

                    b.Property<double?>("Cholesterol_mg")
                        .HasColumnType("float");

                    b.Property<double?>("DHA_g")
                        .HasColumnType("float");

                    b.Property<double?>("DPA_g")
                        .HasColumnType("float");

                    b.Property<double?>("Disaccharides_g")
                        .HasColumnType("float");

                    b.Property<double?>("EPA_g")
                        .HasColumnType("float");

                    b.Property<int?>("Energy_kcal")
                        .HasColumnType("int");

                    b.Property<int?>("Energy_kj")
                        .HasColumnType("int");

                    b.Property<double?>("FatTotal_g")
                        .HasColumnType("float");

                    b.Property<double?>("FattyAcids410_g")
                        .HasColumnType("float");

                    b.Property<double?>("Fiber_g")
                        .HasColumnType("float");

                    b.Property<double?>("FolateTotal_ug")
                        .HasColumnType("float");

                    b.Property<int?>("FreeSugar_g")
                        .HasColumnType("int");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Iodine_ug")
                        .HasColumnType("float");

                    b.Property<double?>("Iron_mg")
                        .HasColumnType("float");

                    b.Property<double?>("LauricAcid_g")
                        .HasColumnType("float");

                    b.Property<double?>("LinoleicAcid_g")
                        .HasColumnType("float");

                    b.Property<double?>("LinolenicAcid_g")
                        .HasColumnType("float");

                    b.Property<int?>("Magnesium_mg")
                        .HasColumnType("int");

                    b.Property<double?>("Monosaccharides_g")
                        .HasColumnType("float");

                    b.Property<double?>("MonounsaturatedFattyAcids_g")
                        .HasColumnType("float");

                    b.Property<double?>("MyristicAcid_g")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("NiacinEquivalents_mg")
                        .HasColumnType("float");

                    b.Property<double?>("Niacin_mg")
                        .HasColumnType("float");

                    b.Property<double?>("OleicAcid_g")
                        .HasColumnType("float");

                    b.Property<double?>("PalmiticAcid_g")
                        .HasColumnType("float");

                    b.Property<double?>("PalmitoleicAcid_g")
                        .HasColumnType("float");

                    b.Property<int?>("Phosphorus_mg")
                        .HasColumnType("int");

                    b.Property<double?>("PolyunsaturatedFattyAcids_g")
                        .HasColumnType("float");

                    b.Property<int?>("Potassium_mg")
                        .HasColumnType("int");

                    b.Property<double?>("Protein_g")
                        .HasColumnType("float");

                    b.Property<double?>("Retinol_ug")
                        .HasColumnType("float");

                    b.Property<double?>("Riboflavin_mg")
                        .HasColumnType("float");

                    b.Property<double?>("Salt_g")
                        .HasColumnType("float");

                    b.Property<double?>("SaturatedFattyAcids_g")
                        .HasColumnType("float");

                    b.Property<double?>("Selenium_ug")
                        .HasColumnType("float");

                    b.Property<int?>("Sodium_mg")
                        .HasColumnType("int");

                    b.Property<double?>("StearicAcid_g")
                        .HasColumnType("float");

                    b.Property<double?>("SugarsTotal_g")
                        .HasColumnType("float");

                    b.Property<double?>("Thiamin_mg")
                        .HasColumnType("float");

                    b.Property<double?>("Vitamin_A_Re_ug")
                        .HasColumnType("float");

                    b.Property<double?>("Vitamin_B12_ug")
                        .HasColumnType("float");

                    b.Property<double?>("Vitamin_B6_mg")
                        .HasColumnType("float");

                    b.Property<double?>("Vitamin_C_mg")
                        .HasColumnType("float");

                    b.Property<double?>("Vitamin_D_ug")
                        .HasColumnType("float");

                    b.Property<double?>("Vitamin_E_mg")
                        .HasColumnType("float");

                    b.Property<double?>("Vitamin_K_ug")
                        .HasColumnType("float");

                    b.Property<double?>("Waste_percent")
                        .HasColumnType("float");

                    b.Property<double?>("Water_g")
                        .HasColumnType("float");

                    b.Property<int?>("WholeGrainTotal_g")
                        .HasColumnType("int");

                    b.Property<double?>("Zinc_mg")
                        .HasColumnType("float");

                    b.HasKey("FoodId");

                    b.HasIndex("Name");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
